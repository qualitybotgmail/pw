{"changed":true,"filter":false,"title":"ionic-lazy-load-image.js","tooltip":"/www/lib/ionic/js/ionic-lazy-load-image.js","value":"/**\n * Created by PAVEI on 30/09/2014.\n * Updated by Ross Martin on 12/05/2014\n * Updated by Davide Pastore on 04/14/2015\n * Updated by Michel Vidailhet on 05/12/2015\n * Updated by Rene Korss on 11/25/2015\n */\n\nangular.module('ionicLazyLoad', []);\n\nangular.module('ionicLazyLoad')\n\n.directive('lazyScroll', ['$rootScope',\n    function($rootScope) {\n        return {\n            restrict: 'A',\n            link: function ($scope, $element) {\n                var origEvent = $scope.$onScroll;\n                $scope.$onScroll = function () {\n                    $rootScope.$broadcast('lazyScrollEvent');\n\n                    if(typeof origEvent === 'function'){\n                      origEvent();\n                    }\n                };\n            }\n        };\n}])\n\n.directive('imageLazySrc', ['$document', '$timeout', '$ionicScrollDelegate', '$compile',\n    function ($document, $timeout, $ionicScrollDelegate, $compile) {\n        return {\n            restrict: 'A',\n            scope: {\n                lazyScrollResize: \"@lazyScrollResize\",\n                imageLazyBackgroundImage: \"@imageLazyBackgroundImage\",\n                imageLazySrc: \"@\"\n            },\n            link: function ($scope, $element, $attributes) {\n                if (!$attributes.imageLazyDistanceFromBottomToLoad) {\n                    $attributes.imageLazyDistanceFromBottomToLoad = 0;\n                }\n                if (!$attributes.imageLazyDistanceFromRightToLoad) {\n                    $attributes.imageLazyDistanceFromRightToLoad = 0;\n                }\n\n                var loader;\n                if ($attributes.imageLazyLoader) {\n                    loader = $compile('<div class=\"image-loader-container\"><ion-spinner class=\"image-loader\" icon=\"' + $attributes.imageLazyLoader + '\"></ion-spinner></div>')($scope);\n                    $element.after(loader);\n                }\n\n                $scope.$watch('imageLazySrc', function (oldV, newV) {\n                    if(loader)\n                        loader.remove();\n                    if ($attributes.imageLazyLoader) {\n                        loader = $compile('<div class=\"image-loader-container\"><ion-spinner class=\"image-loader\" icon=\"' + $attributes.imageLazyLoader + '\"></ion-spinner></div>')($scope);\n                        $element.after(loader);\n                    }\n                    var deregistration = $scope.$on('lazyScrollEvent', function () {\n                        //    console.log('scroll');\n                            if (isInView()) {\n                                loadImage();\n                                deregistration();\n                            }\n                        }\n                    );\n                    $timeout(function () {\n                        if (isInView()) {\n                            loadImage();\n                            deregistration();\n                        }\n                    }, 500);\n                });\n                var deregistration = $scope.$on('lazyScrollEvent', function () {\n                       // console.log('scroll');\n                        if (isInView()) {\n                            loadImage();\n                            deregistration();\n                        }\n                    }\n                );\n\n                function loadImage() {\n                    //Bind \"load\" event\n                    $element.bind(\"load\", function (e) {\n                        if ($attributes.imageLazyLoader) {\n                            loader.remove();\n                        }\n                        if ($scope.lazyScrollResize == \"true\") {\n                            //Call the resize to recalculate the size of the screen\n                            $ionicScrollDelegate.resize();\n                        }\n                        $element.unbind(\"load\");\n                    });\n\n                    if ($scope.imageLazyBackgroundImage == \"true\") {\n                        var bgImg = new Image();\n                        bgImg.onload = function () {\n                            if ($attributes.imageLazyLoader) {\n                                loader.remove();\n                            }\n                            $element[0].style.backgroundImage = 'url(' + $attributes.imageLazySrc + ')'; // set style attribute on element (it will load image)\n                            if ($scope.lazyScrollResize == \"true\") {\n                                //Call the resize to recalculate the size of the screen\n                                $ionicScrollDelegate.resize();\n                            }\n                        };\n                        bgImg.src = $attributes.imageLazySrc;\n                    } else {\n                        $element[0].src = $attributes.imageLazySrc; // set src attribute on element (it will load image)\n                    }\n                }\n\n                function isInView() {\n                    var clientHeight = $document[0].documentElement.clientHeight;\n                    var clientWidth = $document[0].documentElement.clientWidth;\n                    var imageRect = $element[0].getBoundingClientRect();\n                    return (imageRect.top >= 0 && imageRect.top <= clientHeight + parseInt($attributes.imageLazyDistanceFromBottomToLoad))\n                        && (imageRect.left >= 0 && imageRect.left <= clientWidth + parseInt($attributes.imageLazyDistanceFromRightToLoad));\n                }\n\n                // bind listener\n                // listenerRemover = scrollAndResizeListener.bindListener(isInView);\n\n                // unbind event listeners if element was destroyed\n                // it happens when you change view, etc\n                $element.on('$destroy', function () {\n                    deregistration();\n                });\n\n                // explicitly call scroll listener (because, some images are in viewport already and we haven't scrolled yet)\n                $timeout(function () {\n                    if (isInView()) {\n                        loadImage();\n                        deregistration();\n                    }\n                }, 500);\n            }\n        };\n    }]);","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":140,"column":8},"action":"insert","lines":["/**"," * Created by PAVEI on 30/09/2014."," * Updated by Ross Martin on 12/05/2014"," * Updated by Davide Pastore on 04/14/2015"," * Updated by Michel Vidailhet on 05/12/2015"," * Updated by Rene Korss on 11/25/2015"," */","","angular.module('ionicLazyLoad', []);","","angular.module('ionicLazyLoad')","",".directive('lazyScroll', ['$rootScope',","    function($rootScope) {","        return {","            restrict: 'A',","            link: function ($scope, $element) {","                var origEvent = $scope.$onScroll;","                $scope.$onScroll = function () {","                    $rootScope.$broadcast('lazyScrollEvent');","","                    if(typeof origEvent === 'function'){","                      origEvent();","                    }","                };","            }","        };","}])","",".directive('imageLazySrc', ['$document', '$timeout', '$ionicScrollDelegate', '$compile',","    function ($document, $timeout, $ionicScrollDelegate, $compile) {","        return {","            restrict: 'A',","            scope: {","                lazyScrollResize: \"@lazyScrollResize\",","                imageLazyBackgroundImage: \"@imageLazyBackgroundImage\",","                imageLazySrc: \"@\"","            },","            link: function ($scope, $element, $attributes) {","                if (!$attributes.imageLazyDistanceFromBottomToLoad) {","                    $attributes.imageLazyDistanceFromBottomToLoad = 0;","                }","                if (!$attributes.imageLazyDistanceFromRightToLoad) {","                    $attributes.imageLazyDistanceFromRightToLoad = 0;","                }","","                var loader;","                if ($attributes.imageLazyLoader) {","                    loader = $compile('<div class=\"image-loader-container\"><ion-spinner class=\"image-loader\" icon=\"' + $attributes.imageLazyLoader + '\"></ion-spinner></div>')($scope);","                    $element.after(loader);","                }","","                $scope.$watch('imageLazySrc', function (oldV, newV) {","                    if(loader)","                        loader.remove();","                    if ($attributes.imageLazyLoader) {","                        loader = $compile('<div class=\"image-loader-container\"><ion-spinner class=\"image-loader\" icon=\"' + $attributes.imageLazyLoader + '\"></ion-spinner></div>')($scope);","                        $element.after(loader);","                    }","                    var deregistration = $scope.$on('lazyScrollEvent', function () {","                        //    console.log('scroll');","                            if (isInView()) {","                                loadImage();","                                deregistration();","                            }","                        }","                    );","                    $timeout(function () {","                        if (isInView()) {","                            loadImage();","                            deregistration();","                        }","                    }, 500);","                });","                var deregistration = $scope.$on('lazyScrollEvent', function () {","                       // console.log('scroll');","                        if (isInView()) {","                            loadImage();","                            deregistration();","                        }","                    }","                );","","                function loadImage() {","                    //Bind \"load\" event","                    $element.bind(\"load\", function (e) {","                        if ($attributes.imageLazyLoader) {","                            loader.remove();","                        }","                        if ($scope.lazyScrollResize == \"true\") {","                            //Call the resize to recalculate the size of the screen","                            $ionicScrollDelegate.resize();","                        }","                        $element.unbind(\"load\");","                    });","","                    if ($scope.imageLazyBackgroundImage == \"true\") {","                        var bgImg = new Image();","                        bgImg.onload = function () {","                            if ($attributes.imageLazyLoader) {","                                loader.remove();","                            }","                            $element[0].style.backgroundImage = 'url(' + $attributes.imageLazySrc + ')'; // set style attribute on element (it will load image)","                            if ($scope.lazyScrollResize == \"true\") {","                                //Call the resize to recalculate the size of the screen","                                $ionicScrollDelegate.resize();","                            }","                        };","                        bgImg.src = $attributes.imageLazySrc;","                    } else {","                        $element[0].src = $attributes.imageLazySrc; // set src attribute on element (it will load image)","                    }","                }","","                function isInView() {","                    var clientHeight = $document[0].documentElement.clientHeight;","                    var clientWidth = $document[0].documentElement.clientWidth;","                    var imageRect = $element[0].getBoundingClientRect();","                    return (imageRect.top >= 0 && imageRect.top <= clientHeight + parseInt($attributes.imageLazyDistanceFromBottomToLoad))","                        && (imageRect.left >= 0 && imageRect.left <= clientWidth + parseInt($attributes.imageLazyDistanceFromRightToLoad));","                }","","                // bind listener","                // listenerRemover = scrollAndResizeListener.bindListener(isInView);","","                // unbind event listeners if element was destroyed","                // it happens when you change view, etc","                $element.on('$destroy', function () {","                    deregistration();","                });","","                // explicitly call scroll listener (because, some images are in viewport already and we haven't scrolled yet)","                $timeout(function () {","                    if (isInView()) {","                        loadImage();","                        deregistration();","                    }","                }, 500);","            }","        };","    }]);"],"id":1}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":140,"column":8},"end":{"row":140,"column":8},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1491212495895}